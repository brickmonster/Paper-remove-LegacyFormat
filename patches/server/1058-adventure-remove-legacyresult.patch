From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: brickmonster <92665597+brickmonster@users.noreply.github.com>
Date: Sun, 14 Apr 2024 00:31:16 +0100
Subject: [PATCH] adventure: remove legacyresult


diff --git a/src/main/java/io/papermc/paper/adventure/ChatDecorationProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatDecorationProcessor.java
index 3b53d87a52cafb2503419f21ddd87d42a5ec0330..62654b6afe8e39311c4d9f17746724d4da964cd9 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatDecorationProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatDecorationProcessor.java
@@ -2,32 +2,20 @@ package io.papermc.paper.adventure;
 
 import io.papermc.paper.event.player.AsyncChatCommandDecorateEvent;
 import io.papermc.paper.event.player.AsyncChatDecorateEvent;
-import java.util.ArrayList;
-import java.util.List;
 import java.util.concurrent.CompletableFuture;
 import java.util.regex.Pattern;
 import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.minimessage.MiniMessage;
-import net.kyori.adventure.text.minimessage.tag.resolver.Placeholder;
-import net.kyori.adventure.text.minimessage.tag.resolver.TagResolver;
 import net.minecraft.Optionull;
 import net.minecraft.commands.CommandSourceStack;
 import net.minecraft.network.chat.ChatDecorator;
 import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerPlayer;
 import org.bukkit.craftbukkit.entity.CraftPlayer;
-import org.bukkit.craftbukkit.util.LazyPlayerSet;
 import org.bukkit.event.Event;
-import org.bukkit.event.player.AsyncPlayerChatPreviewEvent;
 import org.checkerframework.checker.nullness.qual.NonNull;
 import org.checkerframework.checker.nullness.qual.Nullable;
 import org.checkerframework.framework.qual.DefaultQualifier;
 
-import static io.papermc.paper.adventure.ChatProcessor.DEFAULT_LEGACY_FORMAT;
-import static io.papermc.paper.adventure.ChatProcessor.canYouHearMe;
-import static io.papermc.paper.adventure.ChatProcessor.displayName;
-import static net.kyori.adventure.text.serializer.legacy.LegacyComponentSerializer.legacySection;
-
 @DefaultQualifier(NonNull.class)
 public final class ChatDecorationProcessor {
 
@@ -51,38 +39,10 @@ public final class ChatDecorationProcessor {
     public CompletableFuture<ChatDecorator.Result> process() {
         return CompletableFuture.supplyAsync(() -> {
             ChatDecorator.Result result = new ChatDecorator.ModernResult(this.originalMessage, true, false);
-            if (listenToLegacy()) {
-                result = this.processLegacy(result);
-            }
             return this.processModern(result);
         }, this.server.chatExecutor);
     }
 
-    @SuppressWarnings("deprecation")
-    private static boolean listenToLegacy() {
-        return canYouHearMe(AsyncPlayerChatPreviewEvent.getHandlerList());
-    }
-
-    @SuppressWarnings("deprecation")
-    private ChatDecorator.Result processLegacy(final ChatDecorator.Result input) {
-        if (this.player != null) {
-            final CraftPlayer player = this.player.getBukkitEntity();
-            final String originalMessage = legacySection().serialize(this.originalMessage);
-            final AsyncPlayerChatPreviewEvent event = new AsyncPlayerChatPreviewEvent(true, player, originalMessage, new LazyPlayerSet(this.server));
-            this.post(event);
-
-            final boolean isDefaultFormat = DEFAULT_LEGACY_FORMAT.equals(event.getFormat());
-            if (event.isCancelled() || (isDefaultFormat && originalMessage.equals(event.getMessage()))) {
-                return input;
-            } else {
-                final Component message = legacySection().deserialize(event.getMessage());
-                final Component component = isDefaultFormat ? message : legacyFormat(event.getFormat(), ((CraftPlayer) event.getPlayer()), legacySection().deserialize(event.getMessage()));
-                return legacy(component, event.getFormat(), new ChatDecorator.MessagePair(message, event.getMessage()), isDefaultFormat);
-            }
-        }
-        return input;
-    }
-
     private ChatDecorator.Result processModern(final ChatDecorator.Result input) {
         final @Nullable CraftPlayer player = Optionull.map(this.player, ServerPlayer::getBukkitEntity);
 
@@ -96,21 +56,7 @@ public final class ChatDecorationProcessor {
         }
         this.post(event);
         if (!event.isCancelled() && !event.result().equals(initialResult)) {
-            if (input instanceof ChatDecorator.LegacyResult legacyResult) {
-                if (legacyResult.hasNoFormatting()) {
-                    /*
-                    The MessagePair in the decoration result may be different at this point. This is because the legacy
-                    decoration system requires the same modifications be made to the message, so we can't have the initial
-                    message value for the legacy chat events be changed by the modern decorate event.
-                     */
-                    return noFormatting(event.result(), legacyResult.format(), legacyResult.message().legacyMessage());
-                } else {
-                    final Component formatted = legacyFormat(legacyResult.format(), player, event.result());
-                    return withFormatting(formatted, legacyResult.format(), event.result(), legacyResult.message().legacyMessage());
-                }
-            } else {
-                return new ChatDecorator.ModernResult(event.result(), true, false);
-            }
+            return new ChatDecorator.ModernResult(event.result(), true, false);
         }
         return input;
     }
@@ -118,28 +64,4 @@ public final class ChatDecorationProcessor {
     private void post(final Event event) {
         this.server.server.getPluginManager().callEvent(event);
     }
-
-    private static Component legacyFormat(final String format, final @Nullable CraftPlayer player, final Component message) {
-        final List<TagResolver.Single> args = new ArrayList<>(player != null ? 2 : 1);
-        if (player != null) {
-            args.add(Placeholder.component(DISPLAY_NAME_TAG, displayName(player)));
-        }
-        args.add(Placeholder.component(CONTENT_TAG, message));
-        String miniMsg = MiniMessage.miniMessage().serialize(legacySection().deserialize(format));
-        miniMsg = DISPLAY_NAME_PATTERN.matcher(miniMsg).replaceFirst("<" + DISPLAY_NAME_TAG + ">");
-        miniMsg = CONTENT_PATTERN.matcher(miniMsg).replaceFirst("<" + CONTENT_TAG + ">");
-        return MiniMessage.miniMessage().deserialize(miniMsg, TagResolver.resolver(args));
-    }
-
-    public static ChatDecorator.LegacyResult legacy(final Component maybeFormatted, final String format, final ChatDecorator.MessagePair message, final boolean hasNoFormatting) {
-        return new ChatDecorator.LegacyResult(maybeFormatted, format, message, hasNoFormatting, false);
-    }
-
-    public static ChatDecorator.LegacyResult noFormatting(final Component component, final String format, final String legacyMessage) {
-        return new ChatDecorator.LegacyResult(component, format, new ChatDecorator.MessagePair(component, legacyMessage), true, true);
-    }
-
-    public static ChatDecorator.LegacyResult withFormatting(final Component formatted, final String format, final Component message, final String legacyMessage) {
-        return new ChatDecorator.LegacyResult(formatted, format, new ChatDecorator.MessagePair(message, legacyMessage), false, true);
-    }
 }
diff --git a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
index e4fd372a1d585887287253a02531cd192929377b..6736edd898e2f90d7dcc274f07ee1c4f93383c6b 100644
--- a/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
+++ b/src/main/java/io/papermc/paper/adventure/ChatProcessor.java
@@ -23,7 +23,6 @@ import net.minecraft.ChatFormatting;
 import net.minecraft.Optionull;
 import net.minecraft.Util;
 import net.minecraft.core.registries.Registries;
-import net.minecraft.network.chat.ChatDecorator;
 import net.minecraft.network.chat.ChatType;
 import net.minecraft.network.chat.OutgoingChatMessage;
 import net.minecraft.network.chat.PlayerChatMessage;
@@ -62,7 +61,6 @@ public final class ChatProcessor {
     static final int MESSAGE_CHANGED = 1;
     static final int FORMAT_CHANGED = 2;
     static final int SENDER_CHANGED = 3; // Not used
-    // static final int FORCE_PREVIEW_USE = 4; // TODO (future, maybe?)
     private final BitSet flags = new BitSet(3);
 
     public ChatProcessor(final MinecraftServer server, final ServerPlayer player, final PlayerChatMessage message, final boolean async) {
@@ -142,8 +140,6 @@ public final class ChatProcessor {
     private ChatRenderer modernRenderer(final String format) {
         if (this.flags.get(FORMAT_CHANGED)) {
             return legacyRenderer(format);
-        } else if (this.message.requireResult() instanceof ChatDecorator.LegacyResult legacyResult) {
-            return legacyRenderer(legacyResult.format());
         } else {
             return defaultRenderer();
         }
@@ -152,25 +148,14 @@ public final class ChatProcessor {
     private Component modernMessage(final String legacyMessage) {
         if (this.flags.get(MESSAGE_CHANGED)) {
             return legacySection().deserialize(legacyMessage);
-        } else if (this.message.unsignedContent() == null && this.message.requireResult() instanceof ChatDecorator.LegacyResult legacyResult) {
-            return legacyResult.message().component();
         } else {
             return this.paper$originalMessage;
         }
     }
 
     private void readLegacyModifications(final String message, final String format, final Player playerSender) {
-        if (this.message.requireResult() instanceof ChatDecorator.LegacyResult result) {
-            if (this.message.unsignedContent() != null && !result.modernized()) {
-                this.flags.set(MESSAGE_CHANGED, !message.equals(result.message().legacyMessage()));
-            } else {
-                this.flags.set(MESSAGE_CHANGED, !message.equals(this.craftbukkit$originalMessage));
-            }
-            this.flags.set(FORMAT_CHANGED, !format.equals(result.format()));
-        } else {
-            this.flags.set(MESSAGE_CHANGED, !message.equals(this.craftbukkit$originalMessage));
-            this.flags.set(FORMAT_CHANGED, !format.equals(DEFAULT_LEGACY_FORMAT));
-        }
+        this.flags.set(MESSAGE_CHANGED, !message.equals(this.craftbukkit$originalMessage));
+        this.flags.set(FORMAT_CHANGED, !format.equals(DEFAULT_LEGACY_FORMAT));
         this.flags.set(SENDER_CHANGED, playerSender != this.player.getBukkitEntity());
     }
 
@@ -207,7 +192,6 @@ public final class ChatProcessor {
         if (originalRenderer != chatEvent.renderer()) { // don't set to false if it hasn't changed
             this.flags.set(FORMAT_CHANGED, true);
         }
-        // this.flags.set(FORCE_PREVIEW_USE, chatEvent.usePreviewComponent()); // TODO (future, maybe?)
     }
 
     private void complete(final AbstractChatEvent event) {
@@ -225,9 +209,6 @@ public final class ChatProcessor {
         final ChatType.Bound chatType = ChatType.bind(chatTypeKey, this.player.level().registryAccess(), PaperAdventure.asVanilla(displayName(player)));
 
         OutgoingChat outgoingChat = viewers instanceof LazyChatAudienceSet lazyAudienceSet && lazyAudienceSet.isLazy() ? new ServerOutgoingChat() : new ViewersOutgoingChat();
-        /* if (this.flags.get(FORCE_PREVIEW_USE)) { // TODO (future, maybe?)
-            outgoingChat.sendOriginal(player, viewers, chatType);
-        } else */
         if (this.flags.get(FORMAT_CHANGED)) {
             if (renderer instanceof ChatRenderer.ViewerUnaware unaware) {
                 outgoingChat.sendFormatChangedViewerUnaware(player, PaperAdventure.asVanilla(unaware.render(player, displayName, message)), viewers, chatType);
diff --git a/src/main/java/net/minecraft/network/chat/ChatDecorator.java b/src/main/java/net/minecraft/network/chat/ChatDecorator.java
index 8885e405b626daa0af1485ad734863af73b3c1f3..adc77ad288f8695a5f789ac057808eadb8b87c2e 100644
--- a/src/main/java/net/minecraft/network/chat/ChatDecorator.java
+++ b/src/main/java/net/minecraft/network/chat/ChatDecorator.java
@@ -47,15 +47,6 @@ public interface ChatDecorator {
 
     record MessagePair(net.kyori.adventure.text.Component component, String legacyMessage) { }
 
-    record LegacyResult(Component component, String format, MessagePair message, boolean hasNoFormatting, boolean modernized) implements Result {
-        public LegacyResult(net.kyori.adventure.text.Component component, String format, MessagePair message, boolean hasNoFormatting, boolean modernified) {
-            this(io.papermc.paper.adventure.PaperAdventure.asVanilla(component), format, message, hasNoFormatting, modernified);
-        }
-        public LegacyResult {
-            component = component instanceof io.papermc.paper.adventure.AdventureComponent adventureComponent ? adventureComponent.deepConverted() : component;
-        }
-    }
-
     record ModernResult(Component component, boolean hasNoFormatting, boolean modernized) implements Result {
         public ModernResult(net.kyori.adventure.text.Component component, boolean hasNoFormatting, boolean modernized) {
             this(io.papermc.paper.adventure.PaperAdventure.asVanilla(component), hasNoFormatting, modernized);
