From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: brickmonster <92665597+brickmonster@users.noreply.github.com>
Date: Sun, 14 Apr 2024 02:10:49 +0100
Subject: [PATCH] adventure: make ImprovedChatDecorate implement ChatDecorator


diff --git a/src/main/java/io/papermc/paper/adventure/ImprovedChatDecorator.java b/src/main/java/io/papermc/paper/adventure/ImprovedChatDecorator.java
index f27d7dedfd770e92ba6da17d3d1032fbf16d46e6..fa08b61da67baed42e75243d4b7d003965b64b28 100644
--- a/src/main/java/io/papermc/paper/adventure/ImprovedChatDecorator.java
+++ b/src/main/java/io/papermc/paper/adventure/ImprovedChatDecorator.java
@@ -15,22 +15,24 @@ import javax.annotation.Nullable;
 import java.util.concurrent.CompletableFuture;
 
 @DefaultQualifier(NonNull.class)
-public final class ImprovedChatDecorator {
-    public static ChatDecorator create(net.minecraft.server.MinecraftServer server) {
-        return new ChatDecorator() {
-            @Override
-            public CompletableFuture<net.minecraft.network.chat.Component> decorate(@Nullable ServerPlayer sender, net.minecraft.network.chat.Component message) {
-                return process(server, sender, null, message);
-            }
+public final class ImprovedChatDecorator implements ChatDecorator {
+    private final MinecraftServer server;
 
-            @Override
-            public CompletableFuture<net.minecraft.network.chat.Component> decorate(@Nullable ServerPlayer sender, @Nullable CommandSourceStack commandSourceStack, net.minecraft.network.chat.Component message) {
-                return process(server, sender, commandSourceStack, message);
-            }
-        };
+    public ImprovedChatDecorator(MinecraftServer server) {
+        this.server = server;
+    }
+
+    @Override
+    public CompletableFuture<net.minecraft.network.chat.Component> decorate(@Nullable ServerPlayer sender, net.minecraft.network.chat.Component message) {
+        return decorate(server, sender, null, message);
+    }
+
+    @Override
+    public CompletableFuture<net.minecraft.network.chat.Component> decorate(@Nullable ServerPlayer sender, @Nullable CommandSourceStack commandSourceStack, net.minecraft.network.chat.Component message) {
+        return decorate(server, sender, commandSourceStack, message);
     }
 
-    private static CompletableFuture<net.minecraft.network.chat.Component> process(final MinecraftServer server, final @Nullable ServerPlayer player, final @Nullable CommandSourceStack commandSourceStack, final net.minecraft.network.chat.Component originalMessageVanilla) {
+    private static CompletableFuture<net.minecraft.network.chat.Component> decorate(final MinecraftServer server, final @Nullable ServerPlayer player, final @Nullable CommandSourceStack commandSourceStack, final net.minecraft.network.chat.Component originalMessageVanilla) {
         return CompletableFuture.supplyAsync(() -> {
             final Component originalMessage = PaperAdventure.asAdventure(originalMessageVanilla);
             final Component initialResult = PaperAdventure.WRAPPER_AWARE_SERIALIZER.deserialize(PaperAdventure.asVanilla(originalMessage));
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0c190ede9b888a27d7dcb4ba7034fdbeaa85c003..cdf0edc9482d15a70030ae9ac904d9e634723846 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2825,7 +2825,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     public ChatDecorator getChatDecorator() {
         // Paper start - support async chat decoration events
-        return io.papermc.paper.adventure.ImprovedChatDecorator.create(this);
+        return new io.papermc.paper.adventure.ImprovedChatDecorator(this);
         // Paper end
     }
 
